# 웹 서비스 개발에는 로그인, 로그아웃, 회원관리, 데이터 베이스 등 매우 많은 기술들이 필요
# 이 모든걸 다 직접 개발할 필요는 없다.
# 잘 만들어진 것들을 가져다가 좋은 환경에서 잘 쓰기만 하면 된다.

# Framework 이해하기
# 전 세계의 수많은 개발자들이 자주 사용되는 부분들을 재사용 할 수 있게 좋은 구조의 코드로 만들어 둠
# 그러한 코드들을 모아놓은 것, 즉 서비스 개발에 필요한 기능들을 미리 구현해서 모아놓은것 = 프레임워크(Framework)

# Frame(뼈대, 틀) + Work(일하다)
# - 일정한 뼈대, 틀을 가지고 일하다.
# - 제공받은 도구들과 뼈대, 규약을 가지고 무언가를 만드는 일
# - 특정 프로그램을 개발하기 위한 여러 도구들과 규약을 제공하는 것
# - 웹 서비스 개발에 있어서 모든 것들을 하나부터 열까지 직접 개발할 필요 없이 로직에 집중할 수 있음
# - 소프트웨어의 생산성과 품질을 높임


# WWW(World Wide Web)
# 전 세계에 퍼져 있는 거미줄 같은 연결망


# 클라이언트 - 서버 구조
# 오늘날 우리가 사용하는 대부분의 웹 서비스는 클라이언트 - 서버 구조를 기반으로 동작

# 클라이언트
# - 웹 사용자의 인터넷에 연결됭 장치
# - Chrome 또는 Firefox와 같은 웹 브라우저
# - 서비스를 요청한느 주체

# 서버
# 웹 페이지, 사이트 똔느 앱을 저장하는 컴퓨터
# 클라이언트가 웹 페이지에 접근하려고 할 때 서버에서 클라이언트 컴퓨터로 웹 페이지 데이터를 응답해 사용자의 웹 브라우저에 표시됨
# 요청에 대해 서비스를 응답하는 주체

# 어떠한 자원(resource)를 달라고 요청(request)하는 쪽을 클라이언트라고 하고 자원을 제공해주는 쪽을 서버(server)라고 함


# 웹 브라우저란?
# 웹에서 페이지를 찾아 보여주고, 사용자가 하이퍼링크를 통해 다른 페이지로 이동할 수 있도록 하는 프로그램
# 웹 페이지 파일을 우리가 보는 화면으로 바꿔주는(렌더링, rendering) 프로그램


# 웹 페이지란?
# 웹에 있는 문서
# - 우리가 보는 화면 각각 한 장 한 장이 웹 페이지

# 웹 페이지 종류
# - 정적 웹 페이지
# - 동적 웹 페이지


# 정적 웹 페이지
# Static Web Page
# 있는 그대로르 제공하는 것(served as-is)을 의미
# 우리가 지금까지 작성한 웹 페이지이며 한 번 작성된 HTML 파일의 내용이 변하지 않고 모든 사용자에게 동일한 모습으로 전달
# - 서버에 미리 저장된 HTML 파일 그대로 전달된 웹 페이지
# - 같은 상황에서 모든 사용자에게 동일한 정보를 표시

# 동적 웹 페이지
# Dynamic Web Page
# 사용자의 요청에 따라 웹 페이지에 추가적인 수정이 되어 클라이언트에게 전달되는 웹 페이지
# 웹 페이지의 내용을 바꿔주는 주체 == 서버
# - 서버에서 동작하고 있는 프로그램이 웹 페이지를 변경해줌
# - 이렇게 사용자의 요청을 받아서 적잘한 응답을 만들어주는 프로그램을 쉡게 만들 수 있게 도와주는 프레임워크가 바로 우리가 배울 Django


# Design Pattern 이란?
# 각기 다른 기능을 가진 응용 소프트웨어를 개발할 때 공통적인 설계 문제가 존재하며
# 이를 처리하는 해결책 사이에도 공통점이 있다는 것을 발견
# 이러한 유사점을 패턴이라 함


# 소프트웨어 디자인 패턴
# 소프트웨어도 수십년간 전 세계의 개발자들이 계속 만들다 보니 자주 사용되는 구조와 해결책이 있다는 것을 알게 됨
# 앞서 배웠던 클라이언트-서버 구조도 소프트웨어 디자인 패턴 중 하나
# 자주 사용되는 소프트웨어의 구조를 소수의 뛰어난 엔지니어가 마치 건축의 공법처럼 일반적인 구조화를 해둔 것


# 소프트웨어 디자인 패턴의 목적
# 특정 문맥에서 공통적으로 발생하는 문제에 대해 재사용 가능한 해결책을 제시
# 프로그래머가 어플리케이션이나 시스템을 디자인할 때 발생하는 공통된 문제들을 해결하는데 형식화 된 가장 좋은 관행


# 소프트웨어 디자인 패턴의 장점
# 디자인 패턴을 알고 있다면 서로 복잡한 커뮤니케이션이 매우 간단해짐
# ** 다수의 엔지니어들이 일반화된 패턴으로 소프트웨어 개발을 할 수 있도록 한 규칙, 커뮤니케이션의 효율성을 높이는 기법 **


# Django에서의 디자인 패턴
# Django에도 이러한 디자인 패턴이 적용이 되어 있는데, Django에 적용된 디장니 패턴은 MTV 피턴이다.
# MTV 패턴은 MVC 디장니 패턴을 기반으로 조금 변형된 패턴


# MVC 소프트웨어 디자인 패턴
# MVC는 Model - View - COntroller의 준말
# 데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴
# 하나의 큰 프로그램을 세가지 역할로 구분한 개발 방법론

# 1. Model : 데이터와 관련된 로직을 관리
# 2. View : 레이아웃과 화면을 처리
# 3. Controller : 명령을 model과 view 부분으로 연결

# MVC 소프트웨어 디자인 패턴의 목적
# "관심사 분리"
# 더 나은 업무의 분리와 향상도니 관리를 제공
# 각 부분을 독립적으로 개발할 수 있어, 하나를 수정하고 싶을 때 모두 건들지 않아도 됨
# - 개발 효율성 및 유지보수가 쉬워짐
# - 다수의 멤버로 개발하기 용이함


# MTV 소프트웨어 디자인 패턴
# Django는 MVC 패턴을 기반으로 한 MTV 패턴을 사용
# 두 패턴은 서로 크게 다른 점은 없으며 일부 역할에 대해 부르는 이름이 다름

# MTV 디자인 패턴
# Model
# - MVC 패턴에서 Model의 역할에 해당
# - 데이터와 관련된 로직을 관리
# - 응용프로그램이 데이터 구조를 정의하고 데이터베이스의 기록을 관리

# Template
# 레이아웃과 화면을 처리
# 화면상의 사용자 인터페이스 구조와 레이아웃을 정의
# MVC 패턴에서 View의 역할에 해당

# View
# - Model & Template과 관련한 로직을 처리해서 응답을 반환
# - 클라이언트의 요청에 대해 처리를 분기하는 역할
# - MVC 패턴에서 Controller에 해당
# 동작예시
# - 데이터가 필요하다면 Model에 접근해서 데이터를 가져오고
#   가져온 데이터를 Template로 보내 화면을 구성하고
#   구성된 화면을 응답으로 만들어 클라이언트에게 반환


# Project & Application
# Project
# - "collection of apps"
# - 프로젝트는 앱의 집합
# - 프로젝트에는 여러 앱이 포함될 수 있음
# - 앱은 여러 프로젝트에 있을 수 있음

# Application
# - 앱은 실제 요청을 처리하고 페이지를 보여주는 등의 역할을 담당
# - 일반적으로 앱은 하나의 역할 및 기능 단위로 작성하는 것을 권장함


# render(request, template_name, context)
# 주어진 템플릿을 주어진 컨텍스트 데이터와 결합하고 렌더링 된 텍스트와 함께 HttpResponse(응답) 객체를 반환하는 함수

# 1. request
# - 응답을 생성하는 데 사용되는 요청 객체

# 2. template_name
# - 템플릿의 전체 이름 또는 템플릿 이름의 경로

# 3. context
# - 템플릿에서 사용할 데이터 (딕셔너리 타입으로 작성)


# Templates
# 실제 내용을 보여주는데 사용되는 파일
# 파일의 구조나 레이아웃을 정의
# Template 파일의 기본 경로
# - app 폴더 안의 templates 폴더
# - app_name/templates/
# 템플릿 폴더 이름은 반드시 templates라고 지정해야 함!!!!